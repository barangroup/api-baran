//
//
//

const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const ObjectId = Schema.Types.ObjectId;

var users_schema = Schema({
  first_name: String,
  last_name: String,
  student_number: Number,
  birth_date: Date,
  entering_uni_year: Number,
  mobile: {
    type: String,
    trim: true
  },
  telephone_number: {
    type: String,
    trim: true
  },
  password: String,
  gender: Boolean,
  email: {
    type: String,
    lowercase: true,
    trim: true
  },
  free_times: [{
    date: Date,
    times: [{
      day_of_week: {
        type: String,
        enum: {
          values: ["monday", "tuesday",
            "wednesday", "thursday",
            "friday", "saturday",
            "sunday"
          ],
          message: 'enum validator failed for path day_of_week with value `{VALUE}`'
        }
      },
      from: String,
      to: String
    }]
  }],
  major: String,
  university: String,
  task: [{
    type: ObjectId,
    ref: 'tasks'
  }],
  native: Boolean, // live in mashhad
  have_job: Boolean,
  age_group_decide: [String],
  teaching_lessons: [String],
  skills: [String],
  sadjad_uni_student: Boolean,
  address: String,
  city: String,
  _justified: Boolean, // tojih
  _visited: Boolean,
  _called: Boolean,
  _under_attention: Boolean, // this is for ensani part
  _comments: [{
    date: Date,
    comment: {
      type: String,
      trim: true
    },
    _writer: {
      type: ObjectId,
      ref: 'users'
    }
  }],
  _creator: {
    type: ObjectId,
    ref: 'users'
  },
  _task_history: [ObjectId],
  _site_log: Date,
  _free_of_edu: Boolean,
  _active: Boolean,
  _disabled: Boolean,
  vote: Boolean,
  meta_data: {},
  stations: [{
    type: ObjectId,
    ref: 'stations'
  }]
});

var tasks_schema = Schema({
  title: String,
  name: String,
  comment: String, // ?
  permissions: [
    "root", // admin part
    "define_task_child",
    "logs",
    "news",
    "sms_root", // sms part
    "sms_to_child",
    "birthday_sms",
    "add_user", // ensani part
    "edit_users",
    "see_all_man_users",
    "see_all_woman_users",
    "see_all_man_users_notification",
    "see_all_woman_users_notification",
    "see_man_names",
    "see_woman_names",
    "users_report",
    "add_dispatch", // amoozesh part
    "stations",
    "see_all_man_dispatch",
    "see_all_woman_dispatch",
    "dispatch_report",
    "see_all_man_dispatch_notification",
    "see_all_woman_dispatch_notification",
    "man_mali", // mali part
    "woman_mali",
    "add_cost", // add hazine
    "mali_api",
    "mali_report",
    "mali_store",
    "see_all_mali_notification",
    "vote",
    "vote_counter"
  ],
  _parent: {
    type: ObjectId,
    ref: 'tasks'
  },
  _disable: Boolean
});

var dispatch_schema = Schema({ // ezam
  date: Date,
  costs: [{
    type: ObjectId,
    ref: 'mali'
  }],
  comment: String,
  members: [{
    type: ObjectId,
    ref: 'users'
  }],
  _leader: {
    type: ObjectId,
    ref: 'users'
  },
  _station: {
    type: ObjectId,
    ref: 'stations'
  }
});

var stations_schema = Schema({
  name: String,
  address: String,
  male: Boolean,
  female: Boolean,
  age_from: Number,
  age_to: Number,
  phone_numbers: [{
    type: String,
    trim: true
  }],
  mobile_number: {
    type: String,
    trim: true
  },
  _creator: {
    type: ObjectId,
    ref: 'users'
  },
  _disable: Boolean
});



var mali_schema = Schema({
  comment: String,
  pony: Boolean,
  cost: Number,
  visited: Boolean,
  have_factor: Boolean,
  _owner: {
    type: ObjectId,
    ref: 'users'
  },
  _dispatch: {
    type: ObjectId,
    ref: 'dispatch'
  }
});


var mali_store_schema = Schema({
  name: String,
  count: Number,
  usable: Boolean,
  comment: String,
  _creator: {
    type: ObjectId,
    ref: 'users'
  }
});

var mali_api_schema = Schema({
  name: String,
  family: String,
  age: {
    type: Number,
    min: 0,
    max: 100
  },
  address: String,
  university: String,
  mobile: String,
  home: String,
  work: String,
  username: String,
  password: String,
  email: String,
  status: String,
  job: String
});

var logs_schema = Schema({
  log: String
});

var err_logs_schema = Schema({
  log: String
});

var route_logs_schema = Schema({
  route: String,
  method: String,
  count: Number
});


var send_sms_archive_schema = Schema({
  message: String,
  sender: String,
  sender_user_id: ObjectId,
  to: String,
  date: String,
  status: Number,
  messageid: Number
});


var feedbacks_schema = Schema({
  text: String,
  _writer: {
    type: ObjectId,
    ref: 'users'
  }
});


var birthday_sms_schema = Schema({
  text: String,
  enable: Boolean
});

var sms_config_schema = Schema({
  credit: Number
});

var income_sms_archive_schema = Schema({
  messageid: Number,
  message: String,
  sender: String,
  receptor: String,
  date: String,
  _owner: {
    type: ObjectId,
    ref: 'users'
  }
});

var poll_schema = Schema({
  poll_number: Number,
  username: String,
  first_name: String,
  last_name: String,
  answers: [{
    question: Number,
    text: String
  }]
});

var news_schema = Schema({
  title: String,
  text: String,
  link: String,
  image: String,
  _writer: {
    type: ObjectId,
    ref: 'users'
  }
});


var experience_schema = Schema({
  title: String,
  text: String,
  _writer: {
    type: ObjectId,
    ref: 'users'
  },
  _task: {
    type: ObjectId,
    ref: 'tasks'
  }
});

var contact_us_schema = Schema({
  name: String,
  email: String,
  text: String
});

var temp_user_schema = Schema({
  first_name: String,
  last_name: String,
  gender: String,
  mobile: String
});

var rememberance_schema = Schema({
  index: Number,
  _writer: {
    type: ObjectId,
    ref: 'users'
  },
  title: String,
  text: String,
  like: [{
    type: ObjectId,
    ref: 'users'
  }],
  comment: [{
    _writer: {
      type: ObjectId,
      ref: 'users'
    },
    text: String
  }]
});


module.exports = (function() {
  var _return = {};

  // root
  _return.logs = mongoose.model('logs', logs_schema);
  _return.err_logs = mongoose.model('err_logs', err_logs_schema);
  _return.route_log = mongoose.model('route_log', route_logs_schema);
  _return.feedback = mongoose.model('feedback', feedbacks_schema);
  _return.sms_config = mongoose.model('sms_config', sms_config_schema);
  _return.tasks = mongoose.model('tasks', tasks_schema);
  _return.poll = mongoose.model('poll', poll_schema);
  _return.news = mongoose.model('news', news_schema);
  _return.contact_us = mongoose.model('contact_us', contact_us_schema);


  // pazhoohesh
  _return.users = mongoose.model('users', users_schema);
  _return.experience = mongoose.model('experience', experience_schema);
  _return.temp_users = mongoose.model('temp_users', temp_user_schema);
  _return.rememberance = mongoose.model('rememberance',rememberance_schema);

  // amozesh
  _return.dispatch = mongoose.model('dispatch', dispatch_schema);
  _return.stations = mongoose.model('stations', stations_schema);

  // mali
  _return.mali_api = mongoose.model('mali_api', mali_api_schema);
  _return.mali = mongoose.model('mali', mali_schema);
  _return.mali_store = mongoose.model('mali_store', mali_store_schema);

  // sms
  _return.send_sms_archive = mongoose.model('send_sms_archive', send_sms_archive_schema);
  _return.income_sms_archive = mongoose.model('income_sms_archive', income_sms_archive_schema);
  // _return.sms_counter = mongoose.model('sms_counter', sms_counter_schema);
  _return.birthday_sms = mongoose.model('birthday_sms', birthday_sms_schema);

  return _return;
})();
